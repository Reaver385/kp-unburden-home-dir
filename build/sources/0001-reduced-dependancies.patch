diff --git a/bin/unburden-home-dir b/bin/unburden-home-dir
index 738c26c..ae42b56 100755
--- a/bin/unburden-home-dir
+++ b/bin/unburden-home-dir
@@ -44,14 +44,12 @@ my $BASENAME = 'unburden-home-dir';
 my $LISTSUFFIX = 'list';
 
 # Load Modules
-use Config::File;
 use Getopt::Std; $Getopt::Std::STANDARD_HELP_VERSION = 1;
 use File::Path qw(mkpath rmtree);
 use File::Basename;
 use File::BaseDir qw(config_home);
-use File::Touch;
-use File::Rsync;
 use File::Which;
+use IO::File;
 use IO::Handle;
 use Data::Dumper;
 
@@ -111,6 +109,68 @@ Options without parameters:
     return;
 }
 
+#
+# BEGIN: Non-packaged lighter-weight implementations of read_config_file, touch and rsync
+#
+
+# Read configuration file
+sub read_config_file($) {
+  my $file = shift;
+  my $fh = IO::File->new($file, 'r') or croak("Can't read configuration in $file: $!\n");
+
+  my $config = {};
+  my $line_num = 0;
+
+  while( ++$line_num and my $line = $fh->getline ) {
+    # remove new lines
+    chomp($line);
+
+    # skip comments and blank lines
+    next if( $line =~ m/^\s*#/ );
+    next if( $line =~ m/^\s*$/ );
+
+    unless( $line =~ m/\s*([A-Za-z0-9_\-]+)\s*=\s*(['"]?)(.*?)\2\s*$/ ) {
+      warn "Invalid format at line $line_num, skipping.";
+      next;
+    }
+
+    # assign the key/value
+    $config->{$1} = $3;
+  }
+
+  return $config;
+}
+
+# Touch files and return the count of touched files.
+sub touch($) {
+  my @files = @_;
+
+  my $count = 0;
+
+  foreach my $f ( @files ) {
+    system 'touch', $f;
+    $count++ unless( $? >> 8 );
+  }
+}
+
+# Perform an verbose archive via rsync
+sub rsync($$) {
+  my ($from, $to) = @_;
+
+  open(PS, "rsync -va \"$from\" \"$to\" 2>&1 |") || return 1;
+
+  while( <PS> ) {
+    chomp;
+    say unless m(^sent |^total size|^\s*$)
+  }
+
+  return $? >> 8;
+}
+
+# END
+#
+
+
 # Parse command line options
 getopts('hnufFb:c:C:l:L:', \%OPTIONS);
 
@@ -153,36 +213,18 @@ for (keys %OPTIONS) {
 foreach my $configfile (@CONFFILES) {
     if ( -e $configfile ) {
         $CONFIG = { %$CONFIG,
-                    %{Config::File::read_config_file($configfile)} };
+                    %{read_config_file($configfile)} };
     }
 }
 
 # Fix some values
 $UID =~ s/\s+//gs;
 
-# Remove quotes and line-feeds from values
-foreach my $key (keys %$CONFIG) {
-    chomp($CONFIG->{$key});
-    $CONFIG->{$key} =~ s/^([\'\"])(.*)\1$/$2/;
-}
-
 # Set proper umask when creating files or directories. Save current
 # umask before.
 my $OLDUMASK = umask();
 umask(077);
 
-# Initialize rsync object
-my $rsync = File::Rsync->new({
-    archive => 1,
-    verbose => 1,
-    outfun => sub {
-        my $_ = shift;
-        chomp;
-        say unless m(^sent |^total size|^\s*$);
-    },
-    errfun => sub { chomp; warn "$_[0]\n"; },
-});
-
 # Check for lsof in search path
 my $which_lsof = which('lsof');
 if (!$which_lsof) {
@@ -211,10 +253,7 @@ sub move ($$) {
             $from .= '/' unless $from =~ m(/$);
             $to .= '/' unless $to =~ m(/$);
 
-            my $rc = $rsync->exec({
-                src => $from,
-                dst => $to,
-            });
+            my $rc = rsync($from, $to);
             rmtree($from);
         } else {
             my $rc = system(qw(mv -v), $from, $to);
@@ -347,7 +386,7 @@ sub files_in_use {
     my $lsof_output = undef;
 
     if (-d $item) {
-        $lsof_output = `find '$item' -print0 | buffer | xargs -0 lsof -F c`;
+        $lsof_output = `find '$item' -print0 | mbuffer -q | xargs -0 lsof -F c`;
     } elsif (-f _) {
         $lsof_output = `lsof -F c '$item'`;
     } else {
@@ -632,6 +671,7 @@ sub exchange_wildcards_and_replacements {
     return ($wildcard, $replacement);
 }
 
+
 # Main loop over all items in list files
 for my $list (@LISTFILES) {
     next unless -r $list;
